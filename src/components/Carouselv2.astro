---
interface Props {
  items: string[];
  pagination: boolean;
  controls: boolean;
  interval: string;
}
const { items, pagination, controls, interval } = Astro.props;
---

<carousel-v2 data-interval={interval}>
  <div class="carousel__container">
    <ul class="carousel__content">
      {
        items.map((item: string, index: number) => {
          const className = index === 0 ? "carousel__item active" : "carousel__item";
          return <li class={className} set:html={item} />;
        })
      }
    </ul>
    {
      pagination && (
        <nav class="carousel__pagination">
          {items.map((_item: string, index: number) => {
            const className = index === 0 ? "active" : "";
            return <button class={className} aria-label={`Activar slide ${index + 1}`} />;
          })}
        </nav>
      )
    }
    {
      controls && (
        <div class="carousel__controls">
          <button class="carousel__controls-prev" aria-label="Ir al slide anterior">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              fill="none"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <>
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M15 6l-6 6l6 6" />
              </>
            </svg>
          </button>
          <button class="carousel__controls-next" aria-label="Ir al slide siguiente">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              fill="none"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <>
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M9 6l6 6l-6 6" />
              </>
            </svg>
          </button>
        </div>
      )
    }
  </div>
</carousel-v2>

<style lang="scss">
  @import "@styles/variables";

  button {
    cursor: pointer;
  }

  .carousel {
    &__container {
      position: relative;
      width: 100%;
      height: 100%;
    }

    &__content {
      position: relative;
      width: 100%;
      overflow: hidden;

      &::after {
        display: block;
        clear: both;
        content: "";
      }
    }

    &__item {
      position: relative;
      display: none;
      float: left;
      width: 100%;
      margin-right: -100%;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      transition: transform 0.6s ease-in-out;

      &.active,
      &--next,
      &--prev {
        display: block;
      }
    }

    &__pagination {
      position: absolute;
      bottom: 8px;
      width: 100%;
      display: flex;
      justify-content: center;
      column-gap: 16px;

      & button {
        border: none;
        background: #bbbbbb;
        cursor: pointer;
        width: 16px;
        height: 16px;
        border-radius: 50%;
      }

      & .active {
        background: #727272;
      }
    }

    &__controls {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      left: 0;
      width: 100%;
      display: flex;
      justify-content: space-between;

      & button {
        border: none;
        background: rgba(0, 0, 0, 0.5);

        & svg {
          display: block;
          width: 32px;
          height: auto;
          color: $font-color-min;
        }
      }
    }
  }

  .carousel__item--next:not(.carousel__item--start),
  .active.carousel__item--end {
    transform: translateX(100%);
  }

  .carousel__item--prev:not(.carousel__item--end),
  .active.carousel__item--start {
    transform: translateX(-100%);
  }
</style>

<script>
  const SELECTOR_ITEM = "carousel__item";
  const SELECTOR_PAGINATION = "carousel__pagination";
  const SELECTOR_BTN_NEXT = "carousel__controls-next";
  const SELECTOR_BTN_PREV = "carousel__controls-prev";
  const CLASS_NAME_ACTIVE = "active";
  const CLASS_NAME_START = "carousel__item--start";
  const CLASS_NAME_END = "carousel__item--end";
  const CLASS_NAME_NEXT = "carousel__item--next";
  const CLASS_NAME_PREV = "carousel__item--prev";

  class CarouselV2 extends HTMLElement {
    items: HTMLCollectionOf<HTMLElement>;
    btnPagination: HTMLCollectionOf<HTMLElement>;
    btnNext: HTMLCollectionOf<HTMLElement>;
    btnPrev: HTMLCollectionOf<HTMLElement>;
    interval: number;
    intervalId: ReturnType<typeof setInterval>;
    orderIndex: number;
    isMoving: boolean;
    numberOfItems: number;
    withPagination: boolean;

    constructor() {
      super();

      this.items = this.getElementsByClassName(SELECTOR_ITEM) as HTMLCollectionOf<HTMLElement>;
      this.btnPagination = this.getElementsByClassName(SELECTOR_PAGINATION) as HTMLCollectionOf<HTMLElement>;
      this.btnNext = this.getElementsByClassName(SELECTOR_BTN_NEXT) as HTMLCollectionOf<HTMLElement>;
      this.btnPrev = this.getElementsByClassName(SELECTOR_BTN_PREV) as HTMLCollectionOf<HTMLElement>;

      this.interval = parseInt(this.dataset.interval || "10000", 10);
      this.intervalId = setInterval(this._loop, this.interval);
      this.orderIndex = -1;
      this.isMoving = false;
      this.numberOfItems = this.items.length;
      this.withPagination = this.btnPagination.length > 0 && this.btnPagination[0].children.length > 0;

      this._addEventListener();
      this._loop();
    }

    _addEventListener = () => {
      if (this.withPagination) {
        for (let i = 0; i < this.btnPagination[0].children.length; i++) {
          this.btnPagination[0].children[i].addEventListener("click", (event) => {
            event.preventDefault();
            if (!this.isMoving) {
              clearInterval(this.intervalId);
              this._move(i);
              this.intervalId = setInterval(this._loop, this.interval);
            }
          });
        }
      }

      if (this.btnPrev.length > 0) {
        this.btnPrev[0].addEventListener("click", (event) => {
          event.preventDefault();
          if (!this.isMoving) {
            clearInterval(this.intervalId);
            this._move((this.orderIndex -= 1));
            this.intervalId = setInterval(this._loop, this.interval);
          }
        });
      }

      if (this.btnNext.length > 0) {
        this.btnNext[0].addEventListener("click", (event) => {
          event.preventDefault();
          if (!this.isMoving) {
            clearInterval(this.intervalId);
            this._move((this.orderIndex += 1));
            this.intervalId = setInterval(this._loop, this.interval);
          }
        });
      }
    };

    _getActive = () => {
      for (let i = 0; i < this.numberOfItems; i++) {
        if (this.items[i].classList.contains(CLASS_NAME_ACTIVE)) return i;
      }
      return -1;
    };

    _reflow = (element: HTMLElement) => {
      element.offsetHeight;
    };

    _setActivePagination = (n: number) => {
      for (let i = 0; i < this.btnPagination[0].children.length; i++) {
        if (n === i) {
          this.btnPagination[0].children[i].classList.add(CLASS_NAME_ACTIVE);
        } else {
          this.btnPagination[0].children[i].classList.remove(CLASS_NAME_ACTIVE);
        }
      }
    };

    _move = (index: number) => {
      const activeItemIndex = this._getActive();

      if (activeItemIndex === -1 || activeItemIndex === index) return;

      this.isMoving = true;

      const isNext = index > activeItemIndex;

      this.orderIndex = isNext ? (index >= this.numberOfItems ? 0 : index) : index < 0 ? this.numberOfItems - 1 : index;

      const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
      const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;

      this.items[this.orderIndex].classList.add(orderClassName);
      this._reflow(this.items[this.orderIndex]);
      this.items[activeItemIndex].classList.add(directionalClassName);
      this.items[this.orderIndex].classList.add(directionalClassName);

      setTimeout(() => {
        this.items[activeItemIndex].classList.remove(CLASS_NAME_ACTIVE, directionalClassName);
        this.items[this.orderIndex].classList.remove(orderClassName, directionalClassName);
        this.items[this.orderIndex].classList.add(CLASS_NAME_ACTIVE);
        if (this.withPagination) {
          this._setActivePagination(this.orderIndex);
        }
        this.isMoving = false;
      }, 600);
    };

    _loop = () => {
      clearInterval(this.intervalId);
      this._move((this.orderIndex += 1));
      this.intervalId = setInterval(this._loop, this.interval);
    };
  }

  customElements.define("carousel-v2", CarouselV2);
</script>
